#Biodiversity Project
#Aiden Krahn
#April 18th, 2024

import random
from colorama import Fore
#how this works:
#the environment will have a random amount of food, water, and environmental danger
#animals will have hunger stats, cannibals, carnivores, herbivores, or omnivores, defenses,

class Organism:
    def __init__(self,name):
        self.name = str(name)
        self.female_population = random.randint(1,300)
        self.male_population = random.randint(1,300)
        self.males = []
        self.females = []
        for x in range(0, self.male_population):
            x = gene_maker()
            self.males.append(x)
            
        for x in range(0, self.female_population):
            x = gene_maker()
            self.females.append(x)
        self.population = (len(self.males) + len(self.females))
        self.gave_birth = []
        self.birthed = []
        self.mutated = []
        self.dead = 0
        self.fecundity = 100
        self.survival = 100
        
    def generation(self):
        self.make_baby()
        y = 0
        tracking = [0,0,0,0,0,0]
        for x in range(0,len(self.males)):
            if "a" in self.males[y]:
                if self.survival > 50:
                    self.survival += 2
                    tracking[0] += 1
                    print(tracking)
                
            if "s" in self.males[y]:
                if self.survival > 50:
                    self.survival -= 2
                    tracking[1] += 1
                    print(tracking)
                
            if "d" in self.males[y]:
                if self.fecundity > 50:
                    self.fecundity += 2
                    tracking[2] += 1
                    print(tracking)
                
            if "f" in self.males[y]:
                if self.fecundity > 50:
                    self.fecundity -= 1
                    tracking[3] += 1
                    print(tracking)
                
            if "g" in self.males[y]:
                if self.fecundity > 50:
                    self.fecundity -= 1
                    tracking[4] += 1
                    print(tracking)
                    
            if "h" in self.males[y]:
                if self.fecundity > 50:
                    self.fecundity += 5
                    tracking[5] += 1
                    print(tracking)
            y += 1
                
        y = 0
        for x in range(0, len(self.males)):
            if "m" in self.males[y]:
                kenny = random.randint(1,self.survival)
                
            else:
                kenny = random.randint(1,50)
                
            if kenny <= 25:
                self.males.pop(y)
                print("A male ",self.name," has died")
                self.dead += 1
            
            else:
                y += 1
            
        y = 0
        for x in range(0,len(self.females)):
            if "m" in self.females[y]:
                kenny = random.randint(1,self.survival)
                
            else:
                kenny = random.randint(1,50)
                
            if kenny <= 25:
                self.females.pop(y)
                print("A female ",self.name, " has died")
                self.dead += 1
                
            else:
                y += 1
                
        if len(self.males) > 50:
            apocachance = random.randint(1,4)
            if apocachance == 1:
                self.apocalypse()
                
        print(f"Male Population of {self.name}: ",len(self.males))
        print(f"Female Population of {self.name}: ",len(self.females))
        for x in range(0, len(self.males)):
            if "m" in self.males[x]:
                self.mutated.append(self.males[x])
                
        for x in range(0,len(self.females)):
            if "m" in self.females[x]:
                self.mutated.append(self.females[x])
                
        print(f"mutated Population of {self.name}: ",len(self.mutated))
        self.mutated = []
        print(f"Overall Population of {self.name}: ",(len(self.males) + len(self.females)))
        print(self.dead)
        print(tracking)
        print(self.survival,self.fecundity)
        
                
        
    def make_baby(self):
        while len(self.males) > 0 and len(self.females) > 0:
            random.shuffle(self.males)
            random.shuffle(self.females)
            father = self.males[0]
            mother = self.females[0]
            self.gave_birth.append(self.females.pop(0))
            maybebaby = random.randint(1,self.fecundity)
            if maybebaby >= 25:
                baby = []
                for x in range(0,4):
                    kenny = random.randint(1,2)
                    if kenny == 1:
                        baby.append(father[x])
                        
                    elif kenny == 2:
                        baby.append(mother[x])
                        
                if father[0] == mother[0] or father[1] == mother[1] or father[2] == mother[2] or father[3] == mother[3]:
                    baby.append('m')
                    
                self.birthed.append(baby)
                
            for x in range(0, len(self.birthed)):#gender reveal party
                kenny = random.randint(1,2)
                if kenny == 1:
                    self.males.append(self.birthed.pop(0))
                    print(f"A male {self.name} has been born")
                    
                else:
                    self.females.append(self.birthed.pop(0))
                    print(f"A female {self.name} has been born")
                
        for x in range(0,len(self.gave_birth)):
            self.females.append(self.gave_birth.pop(0))
            
    def apocalypse(self):
        print(f"{Fore.RED}AN APOCALYPSE IS OCCURING!!{Fore.BLACK}")
        y = 0
        for x in range(0, round((len(self.males)/4)*3)):
            self.males.pop(0)
            print("A male ",self.name," has died")
            self.dead += 1
            
        y = 0
        for x in range(0,round((len(self.females)/4)*3)):
            self.females.pop(0)
            print("A female ",self.name, " has died")
            self.dead += 1
            
        

#the next 27 lines are dedicated to naming random animals based on vowels, consonants, and syllables. 
def generate_syllable():
    vowels = 'aeiou'
    consonants = 'bcdfghjklmnpqrstvwxyz'
    syllable = random.choice(consonants) + random.choice(vowels)
    return syllable

def generate_animal_name(syllable_count):
    name = ''.join([generate_syllable() for _ in range(syllable_count)])
    return name.capitalize()

def generate_random_animal_names(num_names, syllable_count):
    animal_names = [generate_animal_name(syllable_count) for _ in range(num_names)]
    return animal_names
    
def generate_syllable():
    vowels = 'aeiou'
    consonants = 'bcdfghjklmnpqrstvwxyz'
    syllable = random.choice(consonants) + random.choice(vowels)
    return syllable

def generate_animal_name(syllable_count):
    name = ''.join([generate_syllable() for _ in range(syllable_count)])
    return name.capitalize()

def generate_random_animal_names(num_names, syllable_count):
    animal_names = [generate_animal_name(syllable_count) for _ in range(num_names)]
    return animal_names

def gene_maker():
    letters = "asdfghjklzxcvbnqwertyuiopiopiopiop"
    first = random.choice(letters)
    second = random.choice(letters)
    third = random.choice(letters)
    fourth = random.choice(letters)
    genes = [first, second, third, fourth]
    return genes

print("""Welcome to the Genetics Simulator!
We've created a new creature with a new name, population, and genetics
As the test progresses, the species will make babies and die
If the genetics of the parents overlap, there will be mutations that cause more death
How long can a small population live before inbreeding kills them? Let's find out!""")
organisms = []
if __name__ == "__main__":
    syllable_count = random.randint(2,4)
    random_animal_names = generate_random_animal_names(2, syllable_count)
    for name in random_animal_names:
        organisms.append(name)
    print(organisms)
    play = True
    x = 0
    Herbivore = Organism(organisms[0])
    Carnivore = Organism(organisms[0])
    print(Herbivore.males)
    print(Herbivore.females)
    while play == True:
        Herbivore.generation()
        if (len(Herbivore.males) + len(Herbivore.females)) == 0:
            print("EXTINCT")
            play = False
            break
        x += 1
        print(x)
        endorno = input("Type 'NO' to quit, else press ENTER")
        if endorno == "NO":
            play = False
            
        else:
            play = True
    